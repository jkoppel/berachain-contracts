{
  "title": "10.2: Interface & Core Data Types",
  "id": "0ZgadWxxhOzbxJNf3GN8uneSxBR18mGjm89xMCgufHg=",
  "originalId": 2456,
  "position": 44,
  "steps": [
    {
      "type": "textOnly",
      "description": "We start with the interface every other contract, script, or indexer relies on: `IBeraChef.sol`. This tour builds vocabulary – the structs, the events, and the externally-callable functions – so the implementation will feel familiar later.",
      "title": "",
      "id": "29345"
    },
    {
      "type": "highlight",
      "description": "A validator can publish a new reward-splitting schedule with `RewardAllocation`.  Line 15 records when the schedule becomes valid (`startBlock`) and line 17 stores the list of `Weight` entries that describe how to divide the pie.",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 12,
          "end": 18
        }
      ],
      "title": "",
      "id": "29346"
    },
    {
      "type": "highlight",
      "description": "Each **Weight** is one slice of that pie.  Line 23 names the receiving vault, while line 28 stores the slice size in *basis-points*: the denominator is 10 000, so `5000` = 50 %.  This `1e4` convention removes floating-point ambiguity.",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 20,
          "end": 29
        }
      ],
      "title": "",
      "id": "29347"
    },
    {
      "type": "highlight",
      "description": "Commission changes cannot happen instantly.  **QueuedCommissionRateChange** records a request: when it was queued (`blockNumberLast`) and the desired `commissionRate` (again 0–10 000).",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 31,
          "end": 37
        }
      ],
      "title": "",
      "id": "29348"
    },
    {
      "type": "highlight",
      "description": "After the mandatory delay passes, the rate goes live and is stored as **CommissionRate** with its `activationBlock` and the active `commissionRate`.",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 39,
          "end": 45
        }
      ],
      "title": "",
      "id": "29349"
    },
    {
      "type": "textOnly",
      "description": "**Events** are the contract’s broadcast mechanism – off-chain indexers, dashboards and even on-chain automation watch them to stay in sync.",
      "title": "",
      "id": "29350"
    },
    {
      "type": "highlight",
      "description": "Governance-level configuration changes emit:\n- `MaxNumWeightsPerRewardAllocationSet`\n- `MaxWeightPerVaultSet`\n- `RewardAllocationBlockDelaySet`\n- `VaultWhitelistedStatusUpdated` and `WhitelistedVaultMetadataUpdated`\n\nThese let risk-monitors and UIs adjust as soon as limits or vault lists change.",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 51,
          "end": 68
        }
      ],
      "title": "",
      "id": "29351"
    },
    {
      "type": "highlight",
      "description": "Reward allocation lifecycle:\n- `QueueRewardAllocation` — operator has scheduled a new split.\n- `ActivateRewardAllocation` — distributor confirmed it is now live.\nFront-ends can therefore show *future* and *current* splits accurately.",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 76,
          "end": 90
        }
      ],
      "title": "",
      "id": "29352"
    },
    {
      "type": "highlight",
      "description": "**Validator commission lifecycle:**\n- `QueuedValCommission` signals a pending commission change.\n- `ValCommissionSet` marks it active. Delegators can compute their share precisely from block to block.",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 104,
          "end": 117
        }
      ],
      "title": "",
      "id": "29353"
    },
    {
      "type": "textOnly",
      "description": "With the data vocabulary in mind, here are the externally callable functions, grouped by **who** is expected to call them.",
      "title": "",
      "id": "29354"
    },
    {
      "type": "highlight",
      "description": "Governance-only setters adjust global parameters or manage the vault whitelist: `setMaxNumWeightsPerRewardAllocation`, `setMaxWeightPerVault`, `setRewardAllocationBlockDelay`, `setVaultWhitelistedStatus`, `updateWhitelistedVaultMetadata`, `setDefaultRewardAllocation`.",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 206,
          "end": 240
        }
      ],
      "title": "",
      "id": "29355"
    },
    {
      "type": "highlight",
      "description": "Validator-operator actions (schedule changes):\n`queueNewRewardAllocation` places a new split in the queue.\nDistributor actions (make them effective):\n`activateReadyQueuedRewardAllocation` activates a split once the delay passes.",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 246,
          "end": 267
        }
      ],
      "title": "",
      "id": "29356"
    },
    {
      "type": "highlight",
      "description": "Commission management follows the same pattern:\n`setCommissionChangeDelay` (governance),\n`queueValCommission` (operator queues),\n`activateQueuedValCommission` (distributor finalises).",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 270,
          "end": 289
        }
      ],
      "title": "",
      "id": "29357"
    },
    {
      "type": "highlight",
      "description": "Universal view helpers give anyone read-only access to live or queued data: `getActiveRewardAllocation`, `getQueuedRewardAllocation`, `getSetActiveRewardAllocation`.",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 123,
          "end": 135
        }
      ],
      "title": "",
      "id": "29358"
    },
    {
      "type": "highlight",
      "description": "Additional helpers: readiness checks and commission math – `isReady`, `isQueuedRewardAllocationReady`, `getValQueuedCommissionOnIncentiveTokens`, `getValCommissionOnIncentiveTokens`, `getValidatorIncentiveTokenShare`.",
      "file": "src/pol/interfaces/IBeraChef.sol",
      "highlight": [
        {
          "start": 174,
          "end": 200
        }
      ],
      "title": "",
      "id": "29359"
    },
    {
      "type": "textOnly",
      "description": "You now recognise every noun (`struct`), every verb (`function`) and every signal (`event`) that defines `BeraChef`’s public surface.  With this map in hand, diving into the implementation will be far smoother.",
      "title": "",
      "id": "29360"
    }
  ]
}